name: CI/CD Pipeline

on:
  push:
    branches:
      - main

jobs:
  build-test-ubuntu:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15.1-alpine
        env:
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: test_db
        ports:
          - 5432:5432
        options: >-
          --health-cmd "pg_isready -U test_user -d test_db"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.9

      - name: Install dependencies
        run: |
          python -m venv venv
          source venv/bin/activate
          pip install --no-cache-dir -r requirements.txt

      - name: Wait for PostgreSQL
        run: |
          until pg_isready -h localhost -U test_user -d test_db; do
            echo "Waiting for PostgreSQL to be ready..."
            sleep 5
          done

      - name: Run tests
        env:
          DB_NAME: test_db
          DB_USER: test_user
          DB_PASSWORD: test_password
          DB_HOST: localhost
          DB_PORT: 5432
          SECRET_KEY: ${{ secrets.SECRET_KEY }}
        run: |
          source venv/bin/activate
          python manage.py test

  build-test-windows:
    runs-on: windows-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.9
      - name: Install dependencies
        run: |
          python -m venv venv
          .\venv\Scripts\activate
          pip install --no-cache-dir -r requirements.txt
      - name: Run tests
        env:
          DB_NAME: test_db
          DB_USER: test_user
          DB_PASSWORD: test_password
          DB_HOST: localhost
          DB_PORT: 5432
          SECRET_KEY: ${{ secrets.SECRET_KEY }}
        run: |
          .\venv\Scripts\activate
          python manage.py test

  build-test-macos:
    runs-on: macos-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install PostgreSQL
        run: |
          brew install postgresql
          brew services start postgresql
          export PATH="/usr/local/opt/postgresql/bin:$PATH"

      - name: Set up PostgreSQL user and database
        run: |
          export PATH="/usr/local/opt/postgresql/bin:$PATH"
          psql -d postgres -c "CREATE USER test_user WITH PASSWORD 'test_password';"
          psql -d postgres -c "CREATE DATABASE test_db OWNER test_user;"

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.9

      - name: Upgrade pip
        run: |
          python -m venv venv
          source venv/bin/activate
          python -m pip install --upgrade pip

      - name: Install dependencies
        run: |
          source venv/bin/activate
          pip install --no-cache-dir -r requirements.txt

      - name: Wait for PostgreSQL
        run: |
          until pg_isready -h localhost -U test_user -d test_db; do
            echo "Waiting for PostgreSQL to be ready..."
            sleep 5
          done

      - name: Run tests
        env:
          DB_NAME: test_db
          DB_USER: test_user
          DB_PASSWORD: test_password
          DB_HOST: localhost
          DB_PORT: 5432
          SECRET_KEY: ${{ secrets.SECRET_KEY }}
        run: |
          source venv/bin/activate
          python manage.py test
        
  deploy:
    name: Deploy to Server
    runs-on: ubuntu-latest
    needs:
      - build-test-ubuntu
      - build-test-windows
      - build-test-macos

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install Docker
        run: |
          curl -fsSL https://get.docker.com -o get-docker.sh
          sh get-docker.sh
          sudo usermod -aG docker $USER

      - name: Configure SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/ghactions
          chmod 600 ~/.ssh/ghactions
          # Очистка устаревших ключей
          ssh-keygen -R ${{ secrets.HOST }} || true
          # Добавление ключа сервера
          ssh-keyscan -H ${{ secrets.HOST }} >> ~/.ssh/known_hosts || true

      - name: Deploy application
        run: |
          ssh -v -i ~/.ssh/ghactions ${{ secrets.DEPLOY_USER }}@${{ secrets.HOST }} << EOF
          set -e
          echo "Starting connection..."
          mkdir -p ${{ secrets.DEPLOY_PATH }}
          sudo chown ${{ secrets.DEPLOY_USER }}:${{ secrets.DEPLOY_USER }} ${{ secrets.DEPLOY_PATH }}
          cd ${{ secrets.DEPLOY_PATH }}
          if [ ! -d ".git" ]; then
            echo "Initializing new Git repository for ${{ secrets.REPOSITORY_URL }}"
            git init
            git remote add origin ${{ secrets.REPOSITORY_URL }}
            git pull origin main
          else
            echo "Git repository ${{ secrets.REPOSITORY_URL }} found, pulling latest changes..."
            git pull origin main
          fi
          DB_USER=${{ secrets.DB_USER }} \
          DB_PASSWORD=${{ secrets.DB_PASSWORD }} \
          DB_NAME=${{ secrets.DB_NAME }} \
          docker compose down
          DB_USER=${{ secrets.DB_USER }} \
          DB_PASSWORD=${{ secrets.DB_PASSWORD }} \
          DB_NAME=${{ secrets.DB_NAME }} \
          docker compose up -d --build
          echo "Finishing connection..."
          sleep 10
          exit
          EOF
